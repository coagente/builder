[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "despiece-bot"
version = "1.0.0"
description = "Sistema Multi-Agente para Construcción con LLMs y Validación Numérica"
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
authors = [
    {name = "Coagente", email = "info@coagente.com"},
]
maintainers = [
    {name = "Coagente", email = "info@coagente.com"},
]
keywords = [
    "construction",
    "quantity-takeoff",
    "llm",
    "multi-agent",
    "crewai",
    "dspy",
    "lancedb",
    "fastapi",
    "gemini"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Manufacturing",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Framework :: FastAPI",
    "Environment :: Web Environment",
]
dependencies = [
    # Read from requirements.txt
    # Note: In practice, you'd list dependencies here or use dynamic reading
]
dynamic = ["dependencies"]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.12.1",
    "isort>=5.12.0",
    "flake8>=7.0.0",
    "mypy>=1.7.1",
    "pre-commit>=3.6.0",
]
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.3",
    "mkdocstrings>=0.24.0",
]
test = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.2",
    "factory-boy>=3.3.0",
]

[project.urls]
Homepage = "https://github.com/coagente/builder"
Documentation = "https://github.com/coagente/builder/docs"
Repository = "https://github.com/coagente/builder"
"Bug Tracker" = "https://github.com/coagente/builder/issues"
Changelog = "https://github.com/coagente/builder/blob/main/CHANGELOG.md"

[project.scripts]
despiece-bot = "despiece_bot.cli:main"

# =============================================================================
# TOOL CONFIGURATIONS
# =============================================================================

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/despiece_bot"]

# Black Configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# isort Configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["despiece_bot"]
known_third_party = [
    "fastapi",
    "pydantic",
    "sqlalchemy",
    "redis",
    "celery",
    "crewai",
    "dspy",
    "lancedb",
    "google",
    "langchain",
    "pytest",
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
skip_glob = ["migrations/*"]

# Flake8 Configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
max-complexity = 10
select = ["E", "W", "F", "C", "B"]
exclude = [
    ".git",
    "__pycache__",
    ".tox",
    ".eggs",
    "*.egg",
    "build",
    "dist",
    ".venv",
    "venv",
    "migrations",
]

# MyPy Configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "crewai.*",
    "dspy.*",
    "lancedb.*",
    "lance.*",
    "google.genai.*",
    "pytesseract.*",
    "cv2.*",
]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "ai: marks tests that require AI/LLM calls",
    "gpu: marks tests that require GPU",
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
env = [
    "ENVIRONMENT=testing",
    "DATABASE_URL=sqlite:///./test.db",
    "REDIS_URL=redis://localhost:6379/15",
]

# Coverage Configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "*/__pycache__/*",
    "*/conftest.py",
    "*/setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit Security Configuration
[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]

# Radon Complexity Configuration
[tool.radon]
cc_min = "B"
mi_min = "B"
exclude = "*migrations*,*tests*,*venv*"

# PyUpgrade Configuration
[tool.pyupgrade]
py311-plus = true

# Ruff Configuration (Alternative to flake8)
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["ARG", "S101"]

[tool.ruff.mccabe]
max-complexity = 10

# Semantic Release Configuration
[tool.semantic_release]
version_variable = "src/despiece_bot/__init__.py:__version__"
version_pattern = [
    "pyproject.toml:version",
]
build_command = "pip install -e ."

# Hatch Environment Configuration
[tool.hatch.envs.default]
dependencies = [
    "pytest",
    "pytest-cov",
    "pytest-asyncio",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src {args:tests}"
cov-report = ["test-cov", "coverage html"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "black>=23.1.0",
    "mypy>=1.0.0",
    "ruff>=0.0.243",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src tests}"
style = [
    "ruff {args:.}",
    "black --check --diff {args:.}",
]
fmt = [
    "black {args:.}",
    "ruff --fix {args:.}",
    "style",
]
all = [
    "style",
    "typing",
]

# Documentation Configuration
[tool.hatch.envs.docs]
dependencies = [
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr localhost:8001" 